import { OpenAI } from 'openai';
import axios from 'axios';

// Kh·ªüi t·∫°o OpenAI
const openai = new OpenAI(process.env.OPENAI_API_KEY);

// X·ª≠ l√Ω l·ªánh th·ªùi ti·∫øt
async function handleWeatherCommand(location) {
  try {
    const response = await axios.get(
      `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${process.env.WEATHER_API_KEY}&units=metric&lang=vi`
    );
    
    const weather = response.data;
    return `üå¶ Th·ªùi ti·∫øt t·∫°i ${location}:
‚Ä¢ Nhi·ªát ƒë·ªô: ${weather.main.temp}¬∞C
‚Ä¢ C·∫£m gi√°c nh∆∞: ${weather.main.feels_like}¬∞C
‚Ä¢ ƒê·ªô ·∫©m: ${weather.main.humidity}%
‚Ä¢ Gi√≥: ${weather.wind.speed} m/s
‚Ä¢ M√¥ t·∫£: ${weather.weather[0].description}`;
  } catch (error) {
    console.error('Weather API Error:', error);
    return `‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho "${location}". Vui l√≤ng th·ª≠ l·∫°i v·ªõi t√™n ƒë·ªãa ƒëi·ªÉm kh√°c.`;
  }
}

// X·ª≠ l√Ω l·ªánh d·ªãch thu·∫≠t
async function handleTranslateCommand(text, targetLang = 'vi') {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `D·ªãch ƒëo·∫°n text sau sang ${targetLang} m·ªôt c√°ch t·ª± nhi√™n nh·∫•t. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch, kh√¥ng th√™m ghi ch√∫.`
        },
        {
          role: "user",
          content: text
        }
      ],
      temperature: 0.3
    });
    
    return completion.choices[0].message.content;
  } catch (error) {
    console.error('Translation Error:', error);
    return "‚ùå L·ªói d·ªãch thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
}

// X·ª≠ l√Ω chat th√¥ng th∆∞·ªùng
async function handleNormalChat(messages) {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `B·∫°n l√† Natura - tr·ª£ l√Ω AI th√¥ng minh v·ªõi:
‚Ä¢ Gi·ªçng ƒëi·ªáu th√¢n thi·ªán, nhi·ªát t√¨nh
‚Ä¢ H·ªó tr·ª£ ti·∫øng Vi·ªát t·ª± nhi√™n
‚Ä¢ C√≥ th·ªÉ x·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát:
  /weather [ƒë·ªãa ƒëi·ªÉm] - Tra th·ªùi ti·∫øt
  /translate [text] - D·ªãch sang ti·∫øng Vi·ªát`
        },
        ...messages
      ],
      temperature: 0.7
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('Chat Error:', error);
    return "‚ùå Hi·ªán t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
  }
}

// Main handler
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Ch·ªâ h·ªó tr·ª£ ph∆∞∆°ng th·ª©c POST' });
  }

  try {
    const { messages } = req.body;
    const latestMessage = messages[messages.length - 1]?.content || '';

    // X·ª≠ l√Ω l·ªánh ƒë·∫∑c bi·ªát
    if (latestMessage.startsWith('/weather')) {
      const location = latestMessage.replace('/weather', '').trim();
      if (!location) {
        return res.status(400).json({ response: '‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm (VD: /weather H√† N·ªôi)' });
      }
      const weatherReport = await handleWeatherCommand(location);
      return res.status(200).json({ response: weatherReport });
    }

    if (latestMessage.startsWith('/translate')) {
      const text = latestMessage.replace('/translate', '').trim();
      if (!text) {
        return res.status(400).json({ response: '‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn d·ªãch (VD: /translate Hello)' });
      }
      const translation = await handleTranslateCommand(text);
      return res.status(200).json({ response: `üåç B·∫£n d·ªãch: ${translation}` });
    }

    // X·ª≠ l√Ω chat th√¥ng th∆∞·ªùng
    const aiResponse = await handleNormalChat(messages);
    return res.status(200).json({ response: aiResponse });

  } catch (error) {
    console.error('Server Error:', error);
    return res.status(500).json({ 
      error: 'ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng',
      details: error.message 
    });
  }
}